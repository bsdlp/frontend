input AddToBuildingOnUnitBuildingInput {
  unitsUnitId: ID!
  buildingBuildingId: ID!
  clientMutationId: String!
}

type AddToBuildingOnUnitPayload {
  viewer: Viewer!
  clientMutationId: String!
  buildingBuilding: Building
  unitsUnit: Unit
  buildingBuildingEdge: BuildingEdge
  unitsUnitEdge: UnitEdge
}

type AddToUnitResidentPayload {
  viewer: Viewer!
  clientMutationId: String!
  unitsUnit: Unit
  residentsResident: Resident
  unitsUnitEdge: UnitEdge
  residentsResidentEdge: ResidentEdge
}

input AddToUnitResidentUnitInput {
  residentsResidentId: ID!
  unitsUnitId: ID!
  clientMutationId: String!
}

# The `BigDecimal` scalar type represents signed fractional values with arbitrary precision.
scalar BigDecimal

# The `BigInt` scalar type represents non-fractional signed whole numeric values. BigInt can represent arbitrary big values.
scalar BigInt

type Building implements Node {
  createdAt: DateTime!
  id: ID!
  name: String!
  units(filter: UnitFilter, orderBy: UnitOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UnitConnection
  updatedAt: DateTime!
}

# A connection to a list of items.
type BuildingConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [BuildingEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type BuildingEdge {
  # The item at the end of the edge.
  node: Building!

  # A cursor for use in pagination.
  cursor: String!
}

input BuildingFilter {
  AND: [BuildingFilter!]
  OR: [BuildingFilter!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  units_every: UnitFilter
  units_some: UnitFilter
  units_none: UnitFilter
}

enum BuildingOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input BuildingunitsUnit {
  name: String!
  residentsIds: [ID!]
  residents: [BuildingunitsUnitresidentsResident!]
}

input BuildingunitsUnitresidentsResident {
  name: String!
  unitsIds: [ID!]
  units: [BuildingunitsUnitresidentsResidentunitsUnit!]
}

input BuildingunitsUnitresidentsResidentunitsUnit {
  name: String!
  buildingId: ID
  residentsIds: [ID!]
}

input CreateBuilding {
  name: String
  unitsIds: [ID!]
  units: [BuildingunitsUnit!]
}

input CreateBuildingInput {
  name: String
  unitsIds: [ID!]
  units: [BuildingunitsUnit!]
  clientMutationId: String!
}

type CreateBuildingPayload {
  viewer: Viewer!
  clientMutationId: String!
  building: Building
  edge: BuildingEdge
}

input CreateFile {
  name: String!
}

input CreateFileInput {
  name: String!
  clientMutationId: String!
}

type CreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input CreateResident {
  name: String!
  unitsIds: [ID!]
  units: [ResidentunitsUnit!]
}

input CreateResidentInput {
  name: String!
  unitsIds: [ID!]
  units: [ResidentunitsUnit!]
  clientMutationId: String!
}

type CreateResidentPayload {
  viewer: Viewer!
  clientMutationId: String!
  resident: Resident
  edge: ResidentEdge
}

input CreateUnit {
  name: String!
  buildingId: ID
  building: UnitbuildingBuilding
  residentsIds: [ID!]
  residents: [UnitresidentsResident!]
}

input CreateUnitInput {
  name: String!
  buildingId: ID
  building: UnitbuildingBuilding
  residentsIds: [ID!]
  residents: [UnitresidentsResident!]
  clientMutationId: String!
}

type CreateUnitPayload {
  viewer: Viewer!
  clientMutationId: String!
  unit: Unit
  edge: UnitEdge
  building: Building
}

# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
type CreateUserPayload {
  user: User
  clientMutationId: String
  viewer: Viewer!
}

scalar DateTime

input DeleteBuildingInput {
  id: ID!
  clientMutationId: String!
}

type DeleteBuildingPayload {
  viewer: Viewer!
  clientMutationId: String!
  building: Building
  edge: BuildingEdge
  deletedId: ID
}

input DeleteFileInput {
  id: ID!
  clientMutationId: String!
}

type DeleteFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
  deletedId: ID
}

input DeleteResidentInput {
  id: ID!
  clientMutationId: String!
}

type DeleteResidentPayload {
  viewer: Viewer!
  clientMutationId: String!
  resident: Resident
  edge: ResidentEdge
  deletedId: ID
}

input DeleteUnitInput {
  id: ID!
  clientMutationId: String!
}

type DeleteUnitPayload {
  viewer: Viewer!
  clientMutationId: String!
  unit: Unit
  edge: UnitEdge
  building: Building
  deletedId: ID
}

input DeleteUserInput {
  id: ID!
  clientMutationId: String!
}

type DeleteUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  deletedId: ID
}

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

# A connection to a list of items.
type FileConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FileEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type FileEdge {
  # The item at the end of the edge.
  node: File!

  # A cursor for use in pagination.
  cursor: String!
}

input FileFilter {
  AND: [FileFilter!]
  OR: [FileFilter!]
  contentType: String
  contentType_not: String
  contentType_in: [String!]
  contentType_not_in: [String!]
  contentType_lt: String
  contentType_lte: String
  contentType_gt: String
  contentType_gte: String
  contentType_contains: String
  contentType_not_contains: String
  contentType_starts_with: String
  contentType_not_starts_with: String
  contentType_ends_with: String
  contentType_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  secret: String
  secret_not: String
  secret_in: [String!]
  secret_not_in: [String!]
  secret_lt: String
  secret_lte: String
  secret_gt: String
  secret_gte: String
  secret_contains: String
  secret_not_contains: String
  secret_starts_with: String
  secret_not_starts_with: String
  secret_ends_with: String
  secret_not_ends_with: String
  size: Int
  size_not: Int
  size_in: [Int!]
  size_not_in: [Int!]
  size_lt: Int
  size_lte: Int
  size_gt: Int
  size_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
}

enum FileOrderBy {
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

# The `Long` scalar type represents non-fractional signed whole numeric values.
# Long can represent values between -(2^63) and 2^63 - 1.
scalar Long

type Mutation {
  createBuilding(input: CreateBuildingInput!): CreateBuildingPayload
  createFile(input: CreateFileInput!): CreateFilePayload
  createResident(input: CreateResidentInput!): CreateResidentPayload
  createUnit(input: CreateUnitInput!): CreateUnitPayload
  updateBuilding(input: UpdateBuildingInput!): UpdateBuildingPayload
  updateFile(input: UpdateFileInput!): UpdateFilePayload
  updateResident(input: UpdateResidentInput!): UpdateResidentPayload
  updateUnit(input: UpdateUnitInput!): UpdateUnitPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateOrCreateBuilding(input: UpdateOrCreateBuildingInput!): UpdateOrCreateBuildingPayload
  updateOrCreateFile(input: UpdateOrCreateFileInput!): UpdateOrCreateFilePayload
  updateOrCreateResident(input: UpdateOrCreateResidentInput!): UpdateOrCreateResidentPayload
  updateOrCreateUnit(input: UpdateOrCreateUnitInput!): UpdateOrCreateUnitPayload
  updateOrCreateUser(input: UpdateOrCreateUserInput!): UpdateOrCreateUserPayload
  deleteBuilding(input: DeleteBuildingInput!): DeleteBuildingPayload
  deleteFile(input: DeleteFileInput!): DeleteFilePayload
  deleteResident(input: DeleteResidentInput!): DeleteResidentPayload
  deleteUnit(input: DeleteUnitInput!): DeleteUnitPayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  addToBuildingOnUnit(input: AddToBuildingOnUnitBuildingInput!): AddToBuildingOnUnitPayload
  addToUnitResident(input: AddToUnitResidentUnitInput!): AddToUnitResidentPayload
  removeFromBuildingOnUnit(input: RemoveFromBuildingOnUnitBuildingInput!): RemoveFromBuildingOnUnitPayload
  removeFromUnitResident(input: RemoveFromUnitResidentUnitInput!): RemoveFromUnitResidentPayload
  createUser(input: SignupUserInput!): CreateUserPayload!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  viewer: Viewer!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input RemoveFromBuildingOnUnitBuildingInput {
  unitsUnitId: ID!
  buildingBuildingId: ID!
  clientMutationId: String!
}

type RemoveFromBuildingOnUnitPayload {
  viewer: Viewer!
  clientMutationId: String!
  buildingBuilding: Building
  unitsUnit: Unit
  buildingBuildingEdge: BuildingEdge
  unitsUnitEdge: UnitEdge
}

type RemoveFromUnitResidentPayload {
  viewer: Viewer!
  clientMutationId: String!
  unitsUnit: Unit
  residentsResident: Resident
  unitsUnitEdge: UnitEdge
  residentsResidentEdge: ResidentEdge
}

input RemoveFromUnitResidentUnitInput {
  residentsResidentId: ID!
  unitsUnitId: ID!
  clientMutationId: String!
}

type Resident implements Node {
  createdAt: DateTime!
  id: ID!
  name: String!
  units(filter: UnitFilter, orderBy: UnitOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UnitConnection
  updatedAt: DateTime!
}

# A connection to a list of items.
type ResidentConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ResidentEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type ResidentEdge {
  # The item at the end of the edge.
  node: Resident!

  # A cursor for use in pagination.
  cursor: String!
}

input ResidentFilter {
  AND: [ResidentFilter!]
  OR: [ResidentFilter!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  units_every: UnitFilter
  units_some: UnitFilter
  units_none: UnitFilter
}

enum ResidentOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ResidentunitsUnit {
  name: String!
  buildingId: ID
  building: ResidentunitsUnitbuildingBuilding
  residentsIds: [ID!]
  residents: [ResidentunitsUnitresidentsResident!]
}

input ResidentunitsUnitbuildingBuilding {
  name: String
  unitsIds: [ID!]
  units: [ResidentunitsUnitbuildingBuildingunitsUnit!]
}

input ResidentunitsUnitbuildingBuildingunitsUnit {
  name: String!
  buildingId: ID
  residentsIds: [ID!]
}

input ResidentunitsUnitresidentsResident {
  name: String!
  unitsIds: [ID!]
  units: [ResidentunitsUnitresidentsResidentunitsUnit!]
}

input ResidentunitsUnitresidentsResidentunitsUnit {
  name: String!
  buildingId: ID
  residentsIds: [ID!]
}

input SignupUserInput {
  clientMutationId: String!
}

type Unit implements Node {
  building(filter: BuildingFilter): Building
  createdAt: DateTime!
  id: ID!
  name: String!
  residents(filter: ResidentFilter, orderBy: ResidentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ResidentConnection
  updatedAt: DateTime!
}

input UnitbuildingBuilding {
  name: String
  unitsIds: [ID!]
  units: [UnitbuildingBuildingunitsUnit!]
}

input UnitbuildingBuildingunitsUnit {
  name: String!
  residentsIds: [ID!]
  residents: [UnitbuildingBuildingunitsUnitresidentsResident!]
}

input UnitbuildingBuildingunitsUnitresidentsResident {
  name: String!
  unitsIds: [ID!]
}

# A connection to a list of items.
type UnitConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UnitEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type UnitEdge {
  # The item at the end of the edge.
  node: Unit!

  # A cursor for use in pagination.
  cursor: String!
}

input UnitFilter {
  AND: [UnitFilter!]
  OR: [UnitFilter!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  building: BuildingFilter
  residents_every: ResidentFilter
  residents_some: ResidentFilter
  residents_none: ResidentFilter
}

enum UnitOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UnitresidentsResident {
  name: String!
  unitsIds: [ID!]
  units: [UnitresidentsResidentunitsUnit!]
}

input UnitresidentsResidentunitsUnit {
  name: String!
  buildingId: ID
  building: UnitresidentsResidentunitsUnitbuildingBuilding
  residentsIds: [ID!]
  residents: [UnitresidentsResidentunitsUnitresidentsResident!]
}

input UnitresidentsResidentunitsUnitbuildingBuilding {
  name: String
  unitsIds: [ID!]
}

input UnitresidentsResidentunitsUnitresidentsResident {
  name: String!
  unitsIds: [ID!]
}

input UpdateBuilding {
  id: ID!
  name: String
  unitsIds: [ID!]
  units: [BuildingunitsUnit!]
}

input UpdateBuildingInput {
  id: ID!
  name: String
  unitsIds: [ID!]
  units: [BuildingunitsUnit!]
  clientMutationId: String!
}

type UpdateBuildingPayload {
  viewer: Viewer!
  clientMutationId: String!
  building: Building
  edge: BuildingEdge
}

input UpdateFile {
  id: ID!
  name: String
}

input UpdateFileInput {
  id: ID!
  name: String
  clientMutationId: String!
}

type UpdateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreateBuildingInput {
  update: UpdateBuilding!
  create: CreateBuilding!
  clientMutationId: String!
}

type UpdateOrCreateBuildingPayload {
  viewer: Viewer!
  clientMutationId: String!
  building: Building
  edge: BuildingEdge
}

input UpdateOrCreateFileInput {
  update: UpdateFile!
  create: CreateFile!
  clientMutationId: String!
}

type UpdateOrCreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreateResidentInput {
  update: UpdateResident!
  create: CreateResident!
  clientMutationId: String!
}

type UpdateOrCreateResidentPayload {
  viewer: Viewer!
  clientMutationId: String!
  resident: Resident
  edge: ResidentEdge
}

input UpdateOrCreateUnitInput {
  update: UpdateUnit!
  create: CreateUnit!
  clientMutationId: String!
}

type UpdateOrCreateUnitPayload {
  viewer: Viewer!
  clientMutationId: String!
  unit: Unit
  edge: UnitEdge
  building: Building
}

input UpdateOrCreateUserInput {
  update: UpdateUser!
  clientMutationId: String!
}

type UpdateOrCreateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

input UpdateResident {
  id: ID!
  name: String
  unitsIds: [ID!]
  units: [ResidentunitsUnit!]
}

input UpdateResidentInput {
  id: ID!
  name: String
  unitsIds: [ID!]
  units: [ResidentunitsUnit!]
  clientMutationId: String!
}

type UpdateResidentPayload {
  viewer: Viewer!
  clientMutationId: String!
  resident: Resident
  edge: ResidentEdge
}

input UpdateUnit {
  id: ID!
  name: String
  buildingId: ID
  building: UnitbuildingBuilding
  residentsIds: [ID!]
  residents: [UnitresidentsResident!]
}

input UpdateUnitInput {
  id: ID!
  name: String
  buildingId: ID
  building: UnitbuildingBuilding
  residentsIds: [ID!]
  residents: [UnitresidentsResident!]
  clientMutationId: String!
}

type UpdateUnitPayload {
  viewer: Viewer!
  clientMutationId: String!
  unit: Unit
  edge: UnitEdge
  building: Building
}

input UpdateUser {
  id: ID!
}

input UpdateUserInput {
  id: ID!
  clientMutationId: String!
}

type UpdateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

type User implements Node {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge.
  node: User!

  # A cursor for use in pagination.
  cursor: String!
}

input UserFilter {
  AND: [UserFilter!]
  OR: [UserFilter!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
}

enum UserOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

# This is the famous Relay viewer object
type Viewer {
  allBuildings(filter: BuildingFilter, orderBy: BuildingOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): BuildingConnection!
  allFiles(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  allResidents(filter: ResidentFilter, orderBy: ResidentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ResidentConnection!
  allUnits(filter: UnitFilter, orderBy: UnitOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UnitConnection!
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  user: User
  Building(id: ID): Building
  File(id: ID, secret: String, url: String): File
  Resident(id: ID): Resident
  Unit(id: ID): Unit
  User(id: ID): User
  id: ID!
}
